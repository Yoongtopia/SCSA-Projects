<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

    <mapper namespace="TravelRecord">
    	<insert id="insertRecord" parameterType="TravelRecord">
    	insert into travel_record values (record_seq.nextval,#{recordWriter},#{recordTitle},null,null,sysdate,0,0,null)
    	</insert>
    
    	<update id="editRecord" parameterType="map">
    	update travel_record set record_cont=#{recordCont} 
    	where record_num=#{recordNum}
    	</update>
    	
    	<update id="updateRecord" parameterType="TravelRecord">
    	update travel_record set record_title=#{recordTitle}, record_photo=#{recordPhoto}, open_public=#{openPublic}
    	where record_num=#{recordNum}
    	</update>
    	
    	<update id="updateRecordHit" parameterType="int">
    		update travel_record set RECORD_HIT=RECORD_HIT+1
    		where record_num=#{value}
    	</update>
    	
    	<delete id="deleteRecord" parameterType="int">
    	delete from TRAVEL_RECORD where record_num = #{recordNum}
    	</delete>
    	
    	<select id="selectRecord" parameterType="int" resultMap="TravelRecordJoinResultMap">
		select tr.record_num,
			tr.member_id,
			tr.record_title,
			tr.record_cont, 
			tr.record_start_time, 
			tr.record_hit, 
			tr.record_photo, 
			tr.recommend, 
			ts.spot_num, 
			ts.spot_title, 
			ts.spot_cont, 
			ts.spot_latitude,
			ts.spot_longitude,
			to_char(ts.spot_time, 'yy/mm/dd HH24:MI') as spot_time,
			tt.country_name, 
			tt.transportation_type, 
			tt.transportation_name, 
			tt.country_name, 
			t.city_name, 
			t.link, 
			p.photo_name, 
			p.latitude, 
			p.longitude,
			c.continental_name,
			rr.record_latitude,
			rr.record_longitude
		from travel_record tr
		 left outer join continental c on c.record_num=tr.record_num
		 left outer join travel_spot ts on ts.record_num=tr.record_num 
		 left outer join travel_transportation tt on ts.spot_num=tt.spot_num and ts.record_num=tt.record_num
		 left outer join transportation t on tt.transportation_name=t.transportation_name and tt.transportation_type=t.transportation_type
		 left outer join photo p on ts.spot_num=p.spot_num and p.record_num=tr.record_num 
		 left outer join record_route rr on tr.record_num=rr.record_num
		 where tr.record_num=#{value} order by ts.spot_num, rr.record_time
    	</select>
    	
    	<!-- <select id="TravelRecordList" parameterType="map" resultMap="TravelRecordResultMap">
    		select t.record_num,
    			   t.member_id,
    			   t.record_title, 
    			   t.record_cont,
    			   t.record_photo,
    			   t.record_start_time,
    			   t.record_hit,
    			   t.recommend,
    			   c.continental_name
    		from travel_record t, continental c 
    		<where>
    			t.record_num=c.record_num 
    			<if test="continentalName != null">
    				<choose>
	    				<when test="continentalName == 'allContinental'">
	    				</when>
	    				<otherwise>
		    				and continental_name =#{continentalName}
	    				</otherwise>
    				</choose>
    			</if>
    		</where>
			<choose>
				<when test="lineup != null">
					<if test="lineup == 'default'">
						order by record_start_time desc
					</if>
					<if test="lineup == 'recordHit'">
						order by record_hit desc
					</if>
					<if test="lineup == 'recommend'">
						order by recommend desc
					</if>
					<if test="lineup == 'record_start_time'">
						order by record_start_time desc
					</if>
				</when>
				<otherwise>
					order by record_start_time desc
				</otherwise>
			</choose>   			
    	</select> -->
    	
    	
    	<select id="TravelRecordList" parameterType="map" resultMap="TravelRecordResultMap">
    		select * from(select a.*, rownum as rnum from
    		(select t.record_num,
    			   t.member_id,
    			   t.record_title, 
    			   t.record_cont,
    			   t.record_photo,
    			   to_char(t.record_start_time, 'yy/mm/dd HH24:MI') as record_start_time,
    			   t.record_hit,
    			   t.recommend,
    			   t.open_public,
    			   c.continental_name
    		from travel_record t, continental c 
    		<where>
    			t.record_num=c.record_num 
    			
    			<choose>
    				<when test="continentalName != null">
    					<choose>
    						<when test="continentalName == 'allContinental'">
	    					</when>
	    					<when test="continentalName == ''"></when>
	    					<otherwise>
		    					and continental_name like '%'||#{continentalName}||'%'
	    					</otherwise>
    					</choose>
    				</when>
    				<when test="continentalName == null"></when>
    				<otherwise>
    					
    				</otherwise>
    			</choose>
    		</where>
			<choose>
				<when test="lineup != null">
					<if test="lineup == 'default'">
						order by recommend desc
					</if>
					<if test="lineup == 'recordHit'">
						order by record_hit desc
					</if>
					<if test="lineup == 'recommend'">
						order by recommend desc
					</if>
					<if test="lineup == 'recordStartTime'">
						order by record_start_time desc
					</if>
					<if test="lineup == ''">
						order by recommend desc
					</if>
				</when>
				<when test="lineup == null">
					order by recommend desc
				</when>
				
				<otherwise>
					order by recommend desc
				</otherwise>
			</choose> ) a) 
				where rnum between #{startNo} and #{endNo}  			
    	</select>
    	  	
    	<select id="selectTravelRecordListByKeyword" parameterType="String" resultMap="TravelRecordResultMap">
    		select *
    		from(
		   		select t.record_num,
		   			   t.member_id,
		   			   t.record_title, 
		   			   t.record_cont,
		   			   t.record_photo,
    			       to_char(t.record_start_time, 'yy/mm/dd HH24:MI') as record_start_time,
		   			   t.record_hit,
		   			   t.recommend,
		   			   c.continental_name
		   		from travel_record t, continental c 
		   		where t.record_num=c.record_num 
    		)
    		where record_title like '%'||#{value}||'%' or continental_name like '%'||#{value}||'%' or record_cont like '%'||#{value}||'%'
    		
    	</select>
    	
    	<select id="selectRecordListById" parameterType="String" resultMap="TravelRecordResultMap">
    		select t.record_num,
		   			   t.member_id,
		   			   t.record_title, 
		   			   t.record_cont,
		   			   t.record_photo,
    			       to_char(t.record_start_time, 'yy/mm/dd HH24:MI') as record_start_time,
		   			   t.record_hit,
		   			   t.recommend,
		   			   c.continental_name
		   	from travel_record t, continental c 
		   	where t.record_num=c.record_num
		   	 and member_id=#{value} 
    	</select>
    	
    	<select id="selectRecordList" resultMap="TravelRecordResultMap2">
select * from(select a.*, rownum as rnum from
    		(select t.record_num,
		   			   t.member_id,
		   			   t.record_title, 
		   			   t.record_cont,
		   			   t.record_photo,
		   			   t.record_start_time,
		   			   t.record_hit,
		   			   t.recommend
		   	from travel_record t order by t.recommend desc) a)
			where rnum between 1 and 3
    	</select>
    	
    	<resultMap type="TravelRecord" id="TravelRecordResultMap2">
			<id column="record_num" property="recordNum"/>
			<result column="member_id" property="recordWriter"/>
			<result column="record_title" property="recordTitle"/>
			<result column="record_cont" property="recordCont"/>
			<result column="record_photo" property="recordPhoto"/>
			<result column="record_start_time" property="recordStartTime"/>
			<result column="record_hit" property="recordHit"/>
			<result column="recommend" property="recommend"/>
		</resultMap>
    	
    	
    	<resultMap type="TravelRecord" id="TravelRecordResultMap">
			<id column="record_num" property="recordNum"/>
			<result column="member_id" property="recordWriter"/>
			<result column="record_title" property="recordTitle"/>
			<result column="record_cont" property="recordCont"/>
			<result column="record_photo" property="recordPhoto"/>
			<result column="record_start_time" property="recordStartTime"/>
			<result column="record_hit" property="recordHit"/>
			<result column="recommend" property="recommend"/>
			<result column="open_public" property="openPublic"/>
			<collection property="continentalName" resultMap="continentalResultMap"/>
		</resultMap>
		
		<resultMap type="String" id="continentalResultMap">
			<id column="continental_name" property="continentalName"/>
 		</resultMap>
				
		<resultMap type="TravelRecord" id="TravelRecordJoinResultMap" 
 		extends="TravelRecordResultMap">
			<collection property="travelSpotList"
				resultMap="TravelSpot.TravelSpotJoinResultMap"/>
			<collection property="routeList" resultMap="RecordLocation.RouteResultMap"/>		
		</resultMap>
		
		<select id="selectRecordById" parameterType="String" resultMap="TravelRecordMapWithoutContinental">
		select record_num, 
			   member_id, 
			   record_title, 
			   record_cont, 
			   record_photo, 
			   record_start_time, 
			   record_hit, 
			   recommend
		from travel_record
		where member_id=#{value}
		order by record_num desc
		</select>
		
		<resultMap type="TravelRecord" id="TravelRecordMapWithoutContinental">
			<id column="record_num" property="recordNum"/>
			<result column="member_id" property="recordWriter"/>
			<result column="record_title" property="recordTitle"/>
			<result column="record_cont" property="recordCont"/>
			<result column="record_start_time" property="recordStartTime"/>
			<result column="record_hit" property="recordHit"/>
			<result column="recommend" property="recommend"/>
		</resultMap>
		
		<select id="selectRecordStartTime" parameterType="hashmap" resultType="String">
		select to_char(record_start_time, 'MM/dd/yyyy HH24:mi:ss') from travel_record
		where record_num=#{recordNum} and member_id=#{memberId}
		</select>
		
		<select id="selectNotEndRecordById" parameterType="String" resultType="TravelRecord">
		select record_num as recordNum, member_id as memberId, record_title as recordTitle,
				record_cont as recordCont, record_start_time as recordStartTime
		from travel_record
		where member_id=#{value} and record_photo is null 
		</select>
		
		<select id="listCount" parameterType="map" resultType="int">
    		select count(*) from travel_record t, continental c
    		<where>
    			t.record_num=c.record_num
    			<choose>
    				<when test="continentalName != null">
		    				<choose>
			    				<when test="continentalName == 'allContinental'">			    				    
			    				</when>
			    				<when test="continentalName == ''"></when>
			    				<otherwise>
				    				and continental_name like '%'||#{continentalName}||'%'
			    				</otherwise>
		    				</choose>
    				</when>
    				<when test="continentalName == null"></when>
    				
					<otherwise></otherwise>
    			</choose>
    		</where> 
    	</select>
		
	</mapper>